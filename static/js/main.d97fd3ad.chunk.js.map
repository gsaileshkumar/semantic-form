{"version":3,"sources":["ExampleForm.jsx","App.js","serviceWorker.js","index.js"],"names":["onSubmitHandler","values","alert","JSON","stringify","ExampleForm","style","width","margin","initialValues","firstname","lastname","age","gender","onSubmit","render","handleSubmit","autoComplete","fieldType","name","selection","options","text","value","when","is","condition","renderOnTrue","renderOnFalse","type","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAKMA,G,OAAkB,SAAAC,GAAM,OAAIC,MAAMC,KAAKC,UAAUH,EAAQ,KAAM,MAwDtDI,EAtDK,WAClB,OACE,yBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WACpC,kBAAC,IAAD,CACEC,cAAe,CACbC,UAAW,UACXC,SAAU,QACVC,IAAK,GACLC,OAAQ,QAEVC,SAAUd,EACVe,OAAQ,YAAuB,IAApBC,EAAmB,EAAnBA,aACT,OACE,0BAAMF,SAAUE,EAAcC,aAAa,OACzC,kBAAC,IAAD,CAAOC,UAAU,OAAOC,KAAK,cAC7B,kBAAC,IAAD,CAAOD,UAAU,OAAOC,KAAK,aAC7B,kBAAC,IAAD,CAAOA,KAAK,QACZ,kBAAC,IAAD,CACED,UAAU,WACVC,KAAK,SACLC,WAAS,EACTC,QAAS,CACP,CAAEC,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,SAAUC,MAAO,aAG7B,kBAAC,IAAD,CAAWC,KAAK,YAAYC,GAAG,OAC7B,kBAAC,IAAD,CAAON,KAAK,WAQd,kBAAC,IAAD,CACEK,KAAK,MACLE,UAAW,SAAAH,GAAK,OAAIA,EAAQ,IAC5BI,aAAc,kBAAC,IAAD,CAAOR,KAAK,mBAC1BS,cAAe,kBAAC,IAAD,CAAOT,KAAK,iBAM7B,2BAAOU,KAAK,iBC5CXC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OAAO,kBAAC,EAAD,MAASsB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d97fd3ad.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"react-final-form\";\nimport { Field, Condition, IfElse } from \"semantic-form\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst onSubmitHandler = values => alert(JSON.stringify(values, null, 2));\n\nconst ExampleForm = () => {\n  return (\n    <div style={{ width: \"500px\", margin: \"0 auto\" }}>\n      <Form\n        initialValues={{\n          firstname: \"sailesh\",\n          lastname: \"kumar\",\n          age: 25,\n          gender: \"male\"\n        }}\n        onSubmit={onSubmitHandler}\n        render={({ handleSubmit }) => {\n          return (\n            <form onSubmit={handleSubmit} autoComplete=\"off\">\n              <Field fieldType=\"text\" name=\"firstname\" />\n              <Field fieldType=\"text\" name=\"lastname\" />\n              <Field name=\"age\" />\n              <Field\n                fieldType=\"dropdown\"\n                name=\"gender\"\n                selection\n                options={[\n                  { text: \"Male\", value: \"male\" },\n                  { text: \"Female\", value: \"female\" }\n                ]}\n              />\n              <Condition when=\"firstname\" is=\"sai\">\n                <Field name=\"hobby\" />\n              </Condition>\n              {/* <IfElseCondition\n                when=\"age\"\n                condition={value => value > 18}\n                renderOnTrue={<InputGroup name=\"liscenceNumber\" />}\n                renderOnFalse={<InputGroup name=\"schoolname\" />}\n              /> */}\n              <IfElse\n                when=\"age\"\n                condition={value => value > 18}\n                renderOnTrue={<Field name=\"liscenceNumber\" />}\n                renderOnFalse={<Field name=\"schoolname\" />}\n              />\n              {/* <IfElseCondition when=\"age\" condition={value => value > 18}>\n                <IfElseCondition.If content=\"asd\">he</IfElseCondition.If>\n              </IfElseCondition> */}\n\n              <input type=\"submit\" />\n            </form>\n          );\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ExampleForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport ExampleForm from \"./ExampleForm\";\n\nfunction App() {\n  return <ExampleForm />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}